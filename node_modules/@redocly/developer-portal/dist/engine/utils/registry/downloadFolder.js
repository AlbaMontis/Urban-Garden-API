const{downloadAsset}=require("./downloadAsset"),{downloadContentsWithRetries}=require("./http");async function downloadAssetsFromFolder(a){const{link:b,contentDir:c,directory:d,headers:e,reporter:f,downloadOnlyOpenapi:g}=a;try{const a=await downloadContentsWithRetries(b,e,{reporter:f}),h=JSON.parse(a);if(h.hasOwnProperty("files")){g&&(h.files=h.files.filter(a=>a.includes(".yaml")||a.includes(".yml")));const a=f.createProgress(`Downloading assets for ${b}`,h.files.length);a.start();const i=await Promise.all(h.files.map(async b=>{const i=await downloadAsset({link:b,contentDir:c,directory:d,headers:{authorization:e.authorization,"accept-encoding":"gzip"},reporter:f,downloadOnlyOpenapi:g});return a.total=h.files.length,a.tick(1),i}));return a.done(),i.filter(Boolean)}return f.panicOnBuild(`Assets folder "${b}" does not contain any "files"`),Promise.resolve()}catch(a){a instanceof SyntaxError?f.panicOnBuild(`Error parsing assets folder "${b}": ${a.message}`):f.panicOnBuild(`Failed to fetch "${b}": ${a.message}`)}}module.exports={downloadAssetsFromFolder};
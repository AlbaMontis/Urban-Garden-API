const path=require("path"),chalk=require("chalk"),isRelativeUrl=require("is-relative-url"),{formatProblems,bundle,lint,loadConfig,OasMajorVersion,openAPIMajor,detectOpenAPI,getTotals,isRedoclyRegistryURL,findConfig}=require("@redocly/openapi-core"),{convertSwagger2OpenAPI}=require("@redocly/reference-docs");let redoclyConfigCache;const REGISTRY_DEPENDENCIES_RULE="registry-dependencies",USE_IGNORE_MESSAGE="Generate a .redocly.lint-ignore.yaml file to ignore lint errors. npx @redocly/cli lint --generate-ignore-file.";module.exports={bundleAndValidate,clearRedoclyConfigCache};function clearRedoclyConfigCache(){redoclyConfigCache=void 0}async function getRedoclyConfiguration(a){return redoclyConfigCache||(redoclyConfigCache=loadConfig(findConfig(a),["minimal"])),redoclyConfigCache}async function bundleAndValidate(a,b,c){const d=await getRedoclyConfiguration(b);d.lint.decorators.oas3_1[REGISTRY_DEPENDENCIES_RULE]="on",d.lint.decorators.oas3_0[REGISTRY_DEPENDENCIES_RULE]="on",d.lint.decorators.oas2[REGISTRY_DEPENDENCIES_RULE]="on";let e=await bundleAndLint(a,b,c,d);return e?(openAPIMajor(detectOpenAPI(e))===OasMajorVersion.Version2&&(e=await convertSwagger2OpenAPI(e)),e):null}function outputMessages(a,b,c){formatProblems(a,{format:process.env.REDOCLY_LINT_OUTPUT_FORMAT||"stylish",maxProblems:20,cwd:c,totals:b}),console.log("")}async function bundleAndLint(a,b,c,d){const e=!!process.env.REDOCLY_OPENAPI_IGNORE_ERRORS,f=!!process.env.REDOCLY_LINT_REGISTRY_DEFINITIONS,g=chalk.blue(isRelativeUrl(a)?path.relative(b,a):a),h=isRedoclyRegistryURL(a);c.log(""),c.info(`${h?"Downloading":"Bundling and linting"}: ${g}`);let i,j;try{i=await bundle({ref:a,config:d}),j=getTotals(i.problems),0<j.errors?(e?c.warn(`Bundled definition with errors at ${g}.`):c.panicOnBuild(`Bundled definition with errors at ${g}.\n${USE_IGNORE_MESSAGE}`),outputMessages(i.problems,j,b)):c.info(`Successfully bundled definition at ${g}`)}catch(a){return c.panicOnBuild(a.message),null}if(h&&!f&&c.info(`Skip linting for definition from registry: ${g}`),0===j.errors&&(!h||f)){const f=await lint({ref:a,config:d}),j=getTotals([...f,...i.problems]),k=`${chalk.red(j.errors+" errors")} `+`${chalk.yellow(j.warnings+" warnings")} `+`${chalk.gray(j.ignored+" ignored")}`,l=`Lint ${g}: ${k}`;outputMessages(f,j,h?"":b),0<j.errors&&!e?c.panicOnBuild(`${l}\n`+chalk.red(`Definition has errors. ${USE_IGNORE_MESSAGE}`)):c.info(l)}return i.bundle?i.bundle.parsed:(c.error(`Unexpected error while bundling the definition at ${g}`),null)}
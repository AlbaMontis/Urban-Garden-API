const path=require("path"),fs=require("fs-extra"),isRelativeUrl=require(`is-relative-url`),bundleAndValidate=require("./openapi-cli-bundle").bundleAndValidate,{definitionsWatcher}=require("../watcher"),gatsbyNode=require("../gatsby-node"),{ProStore}=require("@redocly/reference-docs"),glob=require("glob"),{readYaml}=require("../utils"),definitionsCache={},definitionFileToId={},definitionsWithPageYamlIds={};module.exports={definitionFileToId,getOrCreateRedocStoreById,updateSpecCacheByIdAndPath,updateDefinitionsCache,getRedocStoreById,initDefinitionsWithPageYamlCache,hasCorrespondingPageYaml};async function initDefinitionsWithPageYamlCache({configPath:a,getSiteConfig:b}){const{oasDefinitions:c}=b(),d=glob.sync(path.join(a,"**/*.page.yaml"),{ignore:["**/public/**","**/node_modules/**"]});for(const e of d)try{const b=await readYaml(e),d=b.versions&&Array.isArray(b.versions)?b.versions.map(a=>a.definitionId):b.definitionId&&[b.definitionId]||[];for(const b of d)if(c[b]){const d=path.resolve(a,c[b]);definitionsWithPageYamlIds[d]=b}}catch(a){}}function hasCorrespondingPageYaml(a){return!!definitionsWithPageYamlIds[a]}function getRedocStoreById(a){return definitionsCache[a]}async function getOrCreateRedocStoreById(a,b,c,d){return definitionsCache[a]?definitionsCache[a]:(await updateSpecCacheByIdAndPath(a,b,c,d),definitionsCache[a]||{redocStore:null,redocStoreStr:""})}async function updateSpecCacheByIdAndPath(a,b,c,d){const{reporter:f,getNodesByType:g,getNode:h,configPath:i}=c,j=b.match(/^https?:\/\//)?b:path.relative(i,b);try{fs.existsSync(b)&&fs.statSync(b).isDirectory()&&fs.existsSync(path.join(b,"openapi.yaml"))&&(b=path.join(b,"openapi.yaml"));const e=await bundleAndValidate(b,i,f);if("object"!=typeof e||null===e)return void delete definitionsCache[a];const j=isRelativeUrl(b);e.info&&e.info["x-logo"]&&delete e.info["x-logo"];const k=new ProStore(e,void 0,{showConsole:!0,pagination:"item",...d,disableSearch:!0,ctrlFHijack:!1,disableSidebar:!0}),l=!!definitionsCache[a],m=l&&definitionsCache[a].absolutePath!==b;if(definitionsCache[a]={id:"___redoc_spec_"+a,absolutePath:b,redocStoreStr:JSON.stringify(await k.toJS()),redocStore:k,options:d},l){m&&(f.info("Stop watching "+path.relative(i,definitionsCache[a].absolutePath)),definitionsWatcher.unwatch(definitionsCache[a].absolutePath));const b={},d=g("ContentItem");for(let e of d)if(e.data&&e.data.definitionId===a){const a=h(e.parent);if(b[a.absolutePath])continue;await gatsbyNode.onCreateNode({...c,node:a},c),b[a.absolutePath]=!0}}j&&(m||!l)&&(f.info("Watching OpenAPI Definition at "+path.relative(i,b)),definitionsWatcher.add(b))}catch(b){f.panicOnBuild(`OpenAPI Definition error "${j}":\n${b.message}`),console.log(b),delete definitionsCache[a]}definitionFileToId[b]=a}async function updateDefinitionsCache(a={},b,c){for(let d of Object.keys(a)){const e=a[d],f=isRelativeUrl(e)?path.resolve(b,e):e,g=definitionsCache[d];if(g){if(g.absolutePath===f)continue;await updateSpecCacheByIdAndPath(d,f,c,g.options)}}}
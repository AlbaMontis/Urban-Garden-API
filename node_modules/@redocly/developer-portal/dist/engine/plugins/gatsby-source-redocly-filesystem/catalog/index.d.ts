export type ParsedLink = {
    isRemote?: boolean;
    relativePath?: string;
    orgName?: string;
    apiName?: string;
    versionName?: string;
};
export type Catalog = {
    apiCatalog: {
        title?: string;
        pathPrefix?: string;
        versions: {
            link: string;
            version?: string;
            summary?: string;
        }[];
        defaultVersion?: string;
        disableAutoSidebar?: boolean;
    }[];
};
export type CatalogInfo = {
    title?: string;
    apiName: string;
    apiVersion: string;
    apiPathPrefix: string;
    versions: {
        link: string;
        version?: string;
        summary?: string;
    }[];
    defaultVersion: {
        link: string;
        version?: string;
        summary?: string;
    };
    isDefault: boolean;
    versionRelativePath: string;
    definitionFileRelativePath?: string;
    versionInfo: {
        version: string;
        apiName: string;
        isRemote: true;
        parsedLink: ParsedLink;
        link: string;
        summary: string | undefined;
    };
    redoclyYaml: Record<string, any>;
};
export type VersionInfo = {
    version: string;
    summary: string;
};
export type ResolvedCatalogVersion = {
    metadata: Record<string, any>;
    summary: string;
    apiName: string;
    apiVersion: string;
    link: string;
    isDefault: boolean;
    pathPrefix: string;
    id: string;
    versionRelativePath: string;
};
export type ResolvedCatalogApi = {
    title: string;
    defaultVersion: ResolvedCatalogVersion;
    permission: string | null;
    pathPrefix: string;
    versions: ResolvedCatalogVersion[];
    name: string;
};
/**
 * @type { (config: PluginOptions, reporter: import('gatsby').Reporter) => Promise<void> }
 */
export function initCatalog({ configPath, getSiteConfig }: PluginOptions, reporter: import("gatsby-cli/lib/reporter/reporter").Reporter): Promise<void>;
/**
 * @type { (fileName: string) => (CatalogInfo & { resolvedVersions: CatalogInfo[], resolvedDefaultVersion?: CatalogInfo  }) | undefined }
 */
export function getCatalogInfo(fileName: string): (CatalogInfo & {
    resolvedVersions: CatalogInfo[];
    resolvedDefaultVersion?: CatalogInfo;
}) | undefined;
export function getResolvedApis(): ResolvedCatalogApi[];
